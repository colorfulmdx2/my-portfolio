{"version":3,"sources":["About-me/About.module.scss","Header/Header.module.scss","assets/images/twitter.svg","assets/images/facebook.svg","assets/images/git-hub.svg","assets/images/instagram.svg","assets/images/linked-in.svg","Header/Header.tsx","About-me/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","styleHeader","header","content","logo","navigation","href","About","styleAbout","about","headings","headingsWrapper","mainHeading","subHeading","sideMenu","sideLanguages","sidesContacts","contactElement","src","twitter","facebook","linked","git","instagram","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,SAAW,wBAAwB,gBAAkB,+BAA+B,YAAc,2BAA2B,WAAa,0BAA0B,SAAW,wBAAwB,cAAgB,6BAA6B,cAAgB,6BAA6B,eAAiB,gC,gBCAjWD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,KAAO,qBAAqB,WAAa,6B,oCCD7HD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,uRCwB5BC,EArBA,WACX,OACI,yBAAKC,UAAWC,IAAYC,QACxB,6BACI,yBAAKF,UAAWC,IAAYE,SACxB,yBAAKH,UAAWC,IAAYG,MAA5B,QAGA,yBAAKJ,UAAWC,IAAYI,YACxB,uBAAGC,KAAK,KAAR,SACA,uBAAGA,KAAK,KAAR,UACA,uBAAGA,KAAK,KAAR,aACA,uBAAGA,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,gBCwBTC,EA7BD,WAEV,OACI,yBAAKP,UAAWQ,IAAWC,OACvB,kBAAC,EAAD,MACA,yBAAKT,UAAWQ,IAAWE,UACvB,yBAAKV,UAAWQ,IAAWG,iBACvB,yBAAKX,UAAWQ,IAAWI,aAA3B,sBACA,yBAAKZ,UAAWQ,IAAWK,YAA3B,qBAGR,yBAAKb,UAAWQ,IAAWM,UACvB,yBAAKd,UAAWQ,IAAWO,eACvB,oCACA,oCAEJ,yBAAKf,UAAWQ,IAAWQ,eACvB,yBAAKhB,UAAWQ,IAAWS,gBAAgB,2BAAG,yBAAKC,IAAKC,QACxD,yBAAKnB,UAAWQ,IAAWS,gBAAgB,2BAAG,yBAAKC,IAAKE,QACxD,yBAAKpB,UAAWQ,IAAWS,gBAAgB,2BAAG,yBAAKC,IAAKG,QACxD,yBAAKrB,UAAWQ,IAAWS,gBAAgB,2BAAG,yBAAKC,IAAKI,QACxD,yBAAKtB,UAAWQ,IAAWS,gBAAgB,2BAAG,yBAAKC,IAAKK,YCN7DC,MAdf,WACE,OACE,6BAEE,kBAAC,EAAD,QCJcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a6f00f3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"about\":\"About_about__1q2WY\",\"headings\":\"About_headings__m_hfD\",\"headingsWrapper\":\"About_headingsWrapper__34R-t\",\"mainHeading\":\"About_mainHeading__3-Zly\",\"subHeading\":\"About_subHeading__fT6GU\",\"sideMenu\":\"About_sideMenu__1qmtD\",\"sideLanguages\":\"About_sideLanguages__3qu0-\",\"sidesContacts\":\"About_sidesContacts__148Xw\",\"contactElement\":\"About_contactElement__20wde\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__24swb\",\"content\":\"Header_content__3F056\",\"logo\":\"Header_logo__2fO07\",\"navigation\":\"Header_navigation__pWL_B\"};","module.exports = __webpack_public_path__ + \"static/media/twitter.0b8e44d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.49f5495c.svg\";","module.exports = __webpack_public_path__ + \"static/media/git-hub.bb281b23.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram.36e36bb5.svg\";","module.exports = __webpack_public_path__ + \"static/media/linked-in.b800642f.svg\";","import React from 'react';\r\nimport styleHeader from './Header.module.scss'\r\nimport '../container/Container.css'\r\nconst Header = () => {\r\n    return (\r\n        <div className={styleHeader.header}>\r\n            <div>\r\n                <div className={styleHeader.content}>\r\n                    <div className={styleHeader.logo}>\r\n                        LOGO\r\n                    </div>\r\n                    <div className={styleHeader.navigation}>\r\n                        <a href='/'>About</a>\r\n                        <a href='/'>Resume</a>\r\n                        <a href='/'>Portfolio</a>\r\n                        <a href='/'>Blog</a>\r\n                        <a href='/'>Contact</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styleAbout from './About.module.scss'\r\nimport '../container/Container.css'\r\nimport twitter from '../assets/images/twitter.svg'\r\nimport facebook from '../assets/images/facebook.svg'\r\nimport git from '../assets/images/git-hub.svg'\r\nimport instagram from '../assets/images/instagram.svg'\r\nimport linked from '../assets/images/linked-in.svg'\r\nimport Header from \"../Header/Header\";\r\n\r\n\r\nconst About = () => {\r\n\r\n    return (\r\n        <div className={styleAbout.about}>\r\n            <Header/>\r\n            <div className={styleAbout.headings}>\r\n                <div className={styleAbout.headingsWrapper}>\r\n                    <div className={styleAbout.mainHeading}>Viktor Berezovskyi</div>\r\n                    <div className={styleAbout.subHeading}>I'm a developer</div>\r\n                </div>\r\n            </div>\r\n            <div className={styleAbout.sideMenu}>\r\n                <div className={styleAbout.sideLanguages}>\r\n                    <div>ENG</div>\r\n                    <div>RU</div>\r\n                </div>\r\n                <div className={styleAbout.sidesContacts}>\r\n                    <div className={styleAbout.contactElement}><a><img src={twitter}/></a></div>\r\n                    <div className={styleAbout.contactElement}><a><img src={facebook}/></a></div>\r\n                    <div className={styleAbout.contactElement}><a><img src={linked}/></a></div>\r\n                    <div className={styleAbout.contactElement}><a><img src={git}/></a></div>\r\n                    <div className={styleAbout.contactElement}><a><img src={instagram}/></a></div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Header from \"./Header/Header\";\nimport About from \"./About-me/About\";\nimport Skills from \"./My-skills/Skills\";\nimport Remote from \"./Remote-work/Remote\";\nimport Contact from \"./Contact-me/Contact-me\";\nimport Footer from \"./Footer/Footer\";\nimport MyWorks from \"./My-works/My-works\";\n\nfunction App() {\n  return (\n    <div>\n\n      <About/>\n      {/*<Skills/>\n      <MyWorks/>\n      <Remote/>\n      <Contact/>\n      <Footer/>*/}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}